import sys

sys.path.append('/home/rathin/Desktop/Mininet-Emulab')
from mininet.net import Containernet
import mininet.node
from mininet.node import * #Controller, Docker, DockerRouter, DockerP4Router
from mininet.nodelib import LinuxBridge
from mininet.cli import CLI
from mininet.link import TCLink
from mininet.log import info, setLogLevel
from mininet.config import Subnet
import os
setLogLevel('info')
import subprocess
import argparse


parser = argparse.ArgumentParser()
parser.add_argument("--software", type=str, default="frr")
args = parser.parse_args()

subprocess.run(["sudo", "docker", "stop", "mn.d1"])
subprocess.run(["sudo", "docker", "stop", "mn.d2"])
subprocess.run(["sudo", "docker", "stop", "mn.d3"])
subprocess.run(["sudo", "docker", "stop", "mn.d4"])
subprocess.run(["sudo", "docker", "stop", "mn.s1"])
subprocess.run(["sudo", "docker", "stop", "mn.s2"])

subprocess.run(["sudo", "docker", "rm", "mn.d1"])
subprocess.run(["sudo", "docker", "rm", "mn.d2"])
subprocess.run(["sudo", "docker", "rm", "mn.d3"])
subprocess.run(["sudo", "docker", "rm", "mn.d4"])
subprocess.run(["sudo", "docker", "rm", "mn.s1"])
subprocess.run(["sudo", "docker", "rm", "mn.s2"])


net = Containernet(controller=Controller)

info('*** Adding docker containers\n')

d1 = net.addDocker('d1', dimage="ubuntu:trusty")
d2 = net.addDocker('d2', dimage="ubuntu:trusty")
d3 = net.addDocker('d3', dimage="ubuntu:trusty")
d4 = net.addDocker('d4', dimage="ubuntu:trusty")

info('*** Adding switches\n')

if args.software == 'frr':

	print('I am frr\n')

	s1 = net.addDocker('s1', dimage="kathara/frr:latest", cls=DockerRouter, 
							 software='frr',
		                     ospfd='yes',
		                     bgpd='yes')                         

	s2 = net.addDocker('s2', dimage="kathara/frr:latest", cls=DockerRouter, 
							 software='frr',
		                     ospfd='yes',
		                     bgpd='yes')
		             
elif args.software == 'quagga':

	print('I am Quagga\n')

	s1 = net.addDocker('s1', dimage="kathara/quagga:latest", cls=DockerRouter, 
		                     ospfd='yes',
		                     bgpd='yes')                         

	s2 = net.addDocker('s2', dimage="kathara/quagga:latest", cls=DockerRouter, 
		                     ospfd='yes',
		                     bgpd='yes') 
		                

                       
info('*** Adding subnets\n')
snet1 = Subnet(ipStr="10.0.0.0", prefixLen=24) ## subnet class 1 is of the form 10.0.0.0/24 [all links are subnets in this network, for multi-layered network we need to use bridges]
snet2 = Subnet(ipStr="10.1.0.0", prefixLen=24)
snet3 = Subnet(ipStr="10.2.0.0", prefixLen=24)
snet4 = Subnet(ipStr="10.3.0.0", prefixLen=24)
snet5 = Subnet(ipStr="10.4.0.0", prefixLen=24)

info('*** Creating links\n')

ip1 = snet1.assignIpAddr("10.0.0.2") ## snet1 is 10.0.0.0/24 so the last number can be varied
ip2 = snet1.assignIpAddr("10.0.0.1")
net.addLink(s2, s1, ip1=ip1, ip2=ip2, addr1=snet1.ipToMac(ip1), addr2=snet1.ipToMac(ip2)) ## ip1 is assigned to s2, ip2 is assigned to s1, addr1 and addr2 are the mac-addresses generated by ipToMac function
snet1.addNode(s2, s1)


ip1 = snet2.assignIpAddr("10.1.0.1") ## assign a particular ip
ip2 = snet2.allocateIPAddr() ## allocate a random ip
net.addLink(s1, d1, ip1=ip1, ip2=ip2, addr1=snet2.ipToMac(ip1), addr2=snet2.ipToMac(ip2))
snet2.addNode(s1)

ip1 = snet3.assignIpAddr("10.2.0.1")
ip2 = snet3.allocateIPAddr()
net.addLink(s1, d2, ip1=ip1, ip2=ip2, addr1=snet3.ipToMac(ip1), addr2=snet3.ipToMac(ip2))
snet3.addNode(s1)

ip1 = snet4.assignIpAddr("10.3.0.1")
ip2 = snet4.allocateIPAddr()
net.addLink(s2, d3, ip1=ip1, ip2=ip2, addr1=snet4.ipToMac(ip1), addr2=snet4.ipToMac(ip2))
snet4.addNode(s2, d3)

ip1 = snet5.assignIpAddr("10.4.0.1")
ip2 = snet5.allocateIPAddr()
net.addLink(s2, d4, ip1=ip1, ip2=ip2, addr1=snet4.ipToMac(ip1), addr2=snet4.ipToMac(ip2))
snet5.addNode(s2, d4)


## editing config file for s1 
s1.addRoutingConfig("ospfd", "router ospf")
s1.addRoutingConfig("ospfd", "router-id 10.0.0.1")
s1.addRoutingConfig("ospfd", "network " + snet1.getNetworkPrefix() + " area 0") ## route advertisements to neighbours, area code is unique for every networkPrefix for a router ; snet1.getNetworkPrefix = 10.0.0.0/24
s1.addRoutingConfig("ospfd", "network " + snet2.getNetworkPrefix() + " area 1")
s1.addRoutingConfig("ospfd", "network " + snet3.getNetworkPrefix() + " area 2")
s1.addRoutingConfig("ospfd", "log file tmp/frr.log")
s1.start()

s1.cmd(f"ip route add 10.3.0.0/24 via 10.0.0.2")
s1.cmd(f"ip route add 10.4.0.0/24 via 10.0.0.2")

s2.addRoutingConfig("ospfd", "router ospf")
s2.addRoutingConfig("ospfd", "router-id 10.0.0.2")
s2.addRoutingConfig("ospfd", "network " + snet1.getNetworkPrefix() + " area 0")
s2.addRoutingConfig("ospfd", "network " + snet4.getNetworkPrefix() + " area 1")
s2.addRoutingConfig("ospfd", "network " + snet5.getNetworkPrefix() + " area 2")
s2.addRoutingConfig("ospfd", "log file tmp/frr.log")
s2.start()

s2.cmd(f"ip route add 10.1.0.0/24 via 10.0.0.1")
s2.cmd(f"ip route add 10.2.0.0/24 via 10.0.0.1")
	


d1.setDefaultRoute("gw 10.1.0.1") ## set default route as s1 for host d1 (see the link s1-d1)
d2.setDefaultRoute("gw 10.2.0.1")
d3.setDefaultRoute("gw 10.3.0.1")
d4.setDefaultRoute("gw 10.4.0.1")


info('*** Exp Setup\n')


info('*** Starting network\n')

net.start()

info('*** Running CLI\n')

CLI(net)

info('*** Stopping network')

net.stop()
